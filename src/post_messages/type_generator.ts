import { join, basename } from "path"

import {
  genMessageKey,
  genMessageType,
  merge,
  withEachMessageDefinition,
  write,
} from "./generator_utils"

const typeSourceTemplate = `
/**
 * This file is auto-generated by {filename}, DO NOT EDIT.
 */

export enum Type {
{typeDefLines}
}

export const typeMap: Record<string, Type> = {
{typeMapLines}
}
`

const main = () => {
  const dest = join(__dirname, "./generated_type.ts")

  const typeDefLines: string[] = []
  const typeMapLines: string[] = []

  withEachMessageDefinition((namespace, action, defn) => {
    console.log(`Generating post message type definition for "${namespace}/${action}" event`)

    const key = genMessageKey(namespace, action)
    const type = genMessageType(namespace, action)
    typeDefLines.push(`  ${key} = "${type}",`)
    typeMapLines.push(`  [Type.${key}]: Type.${key},`)
  })

  const code = merge(typeSourceTemplate, {
    typeDefLines: typeDefLines.join("\n"),
    typeMapLines: typeMapLines.join("\n"),
    filename: basename(__filename),
  }).trim()

  write(dest, code)
}

main()
