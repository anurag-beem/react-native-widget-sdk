/**
 * This file is auto-generated by generate_callbacks.ts, DO NOT EDIT.
 *
 * If you need to make changes to the code in this file, you can do so by
 * modifying event_definitions.yml.
 */
import { Type } from "./generated_types"

import {
  Payload,
  LoadPayload,
  ConnectLoadedPayload,
  ConnectSelectedInstitutionPayload,
  ConnectStepChangePayload,
} from "./generated_payloads"

export type LoadCallback = {
  onLoad?: (payload: LoadPayload) => void
}

export type ConnectCallback = {
  onLoaded?: (payload: ConnectLoadedPayload) => void
  onSelectedInstitution?: (payload: ConnectSelectedInstitutionPayload) => void
  onStepChange?: (payload: ConnectStepChangePayload) => void
}

function safeCall<P>(payload: P, fn?: (_: P) => void) {
  if (fn) {
    fn(payload)
  }
}

export function dispatchLoadCallback(callbacks: LoadCallback, payload: Payload) {
  switch (payload.type) {
    case Type.Load:
      safeCall(payload, callbacks.onLoad)
      break

    default:
      throw new Error(`"unable to dispatch post message with unknown type: ${payload.type}"`)
  }
}

export function dispatchConnectCallback(callbacks: ConnectCallback, payload: Payload) {
  switch (payload.type) {
    case Type.ConnectLoaded:
      safeCall(payload, callbacks.onLoaded)
      break

    case Type.ConnectSelectedInstitution:
      safeCall(payload, callbacks.onSelectedInstitution)
      break

    case Type.ConnectStepChange:
      safeCall(payload, callbacks.onStepChange)
      break

    default:
      throw new Error(`"unable to dispatch post message with unknown type: ${payload.type}"`)
  }
}
