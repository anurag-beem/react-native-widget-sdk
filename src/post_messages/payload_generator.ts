import { join, basename } from "path"

import {
  genMessageKey,
  merge,
  withEachMessageDefinition,
  write,
} from "./generator_utils"

const template = `
/**
 * This file is auto-generated by {filename}, DO NOT EDIT.
 */

import { Type } from "./"

{payloadTypes}

export type Payload
  = {payloadUnion}

export function buildPayload(type: Type, metadata: Record<string, string>): Payload {
  switch (type) {
    {buildPayloadCases}

    default:
      throw new Error(\`unknown post message type: \${type}\`)
  }
}
`

const payloadTypeTemplate = `
export type {name}Payload = {
  type: Type.{name}
{fields}
}
`

const buildPayloadCaseTemplate = `
    case Type.{name}:
      return {
        type,
{extractions}
      }
`

const main = () => {
  console.log("Generating payload definitions")

  const payloadTypes: string[] = []
  const payloadTypeNames: string[] = []
  const buildPayloadCases: string[] = []

  withEachMessageDefinition((namespace, action, defn) => {
    console.log(`  - Generating post message payload definition for "${namespace}/${action}" event`)

    const name = genMessageKey(namespace, action)

    const fields = Object.keys(defn).map((key) => `  ${key}: ${defn[key]}`)
    const payloadType = merge(payloadTypeTemplate, {
      name,
      fields: fields.join("\n")
    })

    const extractions = Object.keys(defn).map((key) => `        ${key}: metadata.${key},`)
    const normalizeCase = merge(buildPayloadCaseTemplate, {
      name,
      extractions: extractions.join("\n")
    })

    payloadTypeNames.push(`${name}Payload`)
    payloadTypes.push(payloadType)
    buildPayloadCases.push(normalizeCase)
  })

  const code = merge(template, {
    payloadTypes: payloadTypes.join("\n\n"),
    payloadUnion: payloadTypeNames.join("\n  | "),
    buildPayloadCases: buildPayloadCases.join("\n\n    "),
    filename: basename(__filename),
  })

  const dest = join(__dirname, "./generated_payload.ts")
  write(dest, code)

  console.log("Done generating payload definitions")
}

main()
