import { readFileSync, writeFileSync } from "fs"
import { basename, join } from "path"
import YAML from "yaml"

YAML.defaultOptions.merge = true

export enum DefinitionType {
  Generic,
  Widget,
  Entity,
}

export type DefinitionFile = {
  post_messages: DefinitionSchema
}

export type DefinitionSchema = {
  generic: ActionsSchema
  widgets: ActionsSchema
  entities: ActionsSchema
}

export type ActionsSchema = {
  [index: string]: ActionDefinition
}

export type ActionDefinition = {
  [index: string]: MessageDefinition
}

export type MessageDefinition = {
  [index: string]: string | Record<string, string>
}

const defsFilename = "definitions.yml"
const fileHeaderTemplate = `
/**
 * This file is auto-generated by {filename}, DO NOT EDIT.
 *
 * If you need to make changes to the code in this file, you can do so by
 * modifying {defsFilename}.
 */
`

export const withEachMessageDefinition = <R>(cb: (ns: string, action: string, defn: MessageDefinition, defType: DefinitionType) => R): R[] => {
  const defs = loadDefinitions()
  const ret1 = withEach(defs.generic, (ns, action, defn) => cb(ns, action, defn, DefinitionType.Generic))
  const ret2 = withEach(defs.widgets, (ns, action, defn) => cb(ns, action, defn, DefinitionType.Widget))
  const ret3 = withEach(defs.entities, (ns, action, defn) => cb(ns, action, defn, DefinitionType.Entity))
  return [...ret1, ...ret2, ...ret3]
}

export const withEachGenericMessageDefinition = <R>(cb: (ns: string, action: string, defn: MessageDefinition) => R): R[] => {
  const defs = loadDefinitions()
  return withEach(defs.generic, cb)
}

export const withEachWidgetMessageDefinition = <R>(cb: (ns: string, action: string, defn: MessageDefinition) => R): R[] => {
  const defs = loadDefinitions()
  return withEach(defs.widgets, cb)
}

export const withEach = <R>(group: ActionsSchema, cb: (ns: string, action: string, defn: MessageDefinition) => R): R[] => {
  const results: R[] = []

  for (const namespace in group) {
    const actions = group[namespace]
    for (const action in actions) {
      results.push(cb(namespace, action, actions[action]))
    }
  }

  return results
}

let cachedDefsData: DefinitionFile
export const loadDefinitions = (): DefinitionSchema => {
  if (!cachedDefsData) {
    const defsFile = join(__dirname, defsFilename)
    console.log(`Loading post messages from ${defsFile}`)

    const defsData = readFileSync(defsFile)
    cachedDefsData = YAML.parse(defsData.toString()) as DefinitionFile
  }

  return { ...cachedDefsData.post_messages }
}

export const fileHeader = (filename: string) =>
  merge(fileHeaderTemplate, {
    defsFilename,
    filename: basename(filename),
  })

export const write = (sourceScipt: string, dest: string, contents: string) => {
  contents = fileHeader(sourceScipt) + "\n" + contents
  if (contents[contents.length - 1] !== "\n") {
    contents = contents + "\n"
  }
  console.log(`Writing ${contents.length} bytes to ${dest}`)
  writeFileSync(dest, contents)
}

export const merge = (template: string, fields: Record<string, string>) =>
  Object.keys(fields).reduce((str, field) =>
    str.replace(new RegExp(`{${field}}`, "g"), fields[field]), template).trim()

export const genMessageKey = (namespace: string, action: string) =>
  normalizeCasing(isParentDefn(action) ? namespace : `${namespace}_${action}`)

export const genMessageType =(namespace: string, action: string) =>
  isParentDefn(action) ? `mx/${namespace}` : `mx/${namespace}/${action}`

export const isParentDefn = (action: string) =>
  action === "_"

export const normalizeCasing = (str: string) =>
  str
    .replace(/(^[a-z])/i, (match) => match.toUpperCase())
    .replace(/([-_/][a-z])/ig, (match) => match.toUpperCase())
    .replace("-", "")
    .replace("_", "")
    .replace("/", "")
